describe("Testing the meta tags generated by eleventy-plugin-metagen ", () => {
    before(() => {
        cy.visit("../../_site/tests/index.html");
    });

    it("<title> tag is generated and matches", () => {
        cy.title()
            .should("eq", "Eleventy Plugin Meta Generator")
    });

    it("Generic meta tags are generated", () => {
        const map = {
            "charset": "utf-8",
            "http-equiv": "IE=edge",
            "viewport": "width=device-width, initial-scale=1",
            "author": "Tanner Dolby",
            "title": "Eleventy Plugin Meta Generator",
            "description": "An eleventy shortcode for generating meta tags.",
            "generator": "11ty"
        };
        let idx = 0;
        for (const prop in map) {
            if (idx == 0) {
                cy.get("meta[charset]")
                    .invoke("attr", "charset")
                    .should("eq", "utf-8")
            } else if (idx == 1) {
                cy.get("meta[http-equiv]")
                    .invoke("attr", "http-equiv")
                    .should("eq", "X-UA-Compatible")
                cy.get("meta[http-equiv]")
                    .invoke("attr", "content")
                    .should("eq", "IE=edge")
            } else {
                cy.get(`meta[name=${prop}]`)
                    .each(el => {
                        cy.get(el)
                            .invoke("attr", "content")
                            .should("eq", map[prop])
                    });
            }
            idx += 1;
        }
    });

    it("preconnect and/or dns-prefetch tags are generated", () => {
        const map = {
            "preconnect": "https://foo.com",
            "dns-prefetch": "https://example.com"
        };
        for (const prop in map) {
            cy.get(`link[rel="${prop}"]`)
                .invoke("attr", "href")
                .should("eq", `${map[prop]}`)
        }
    });

    it("Twitter meta tags are generated", () => {
        const map = {
            "card": "summary_large_image",
            "site": "@tannerdolby",
            "creator": "@tannerdolby",
            "url": "https://tannerdolby.com",
            "title": "Eleventy Plugin Meta Generator",
            "description": "An eleventy shortcode for generating meta tags.",
            "image": "https://tannerdolby.com/images/arch-spiral-large.jpg",
            "image:alt": "Archimedean Spiral"
        };
        for (const prop in map) {
            cy.get(`meta[name='twitter:${prop}']`)
                .each(el => {
                    cy.get(el)
                        .invoke("attr", "content")
                        .should("eq", map[prop]);
                });
        }
    });

    it("Open Graph meta tags are generated", () => {
        const map = {
            "type": "website",
            "url": "https://tannerdolby.com",
            "locale": "en_US",
            "title": "Eleventy Plugin Meta Generator",
            "description": "An eleventy shortcode for generating meta tags.",
            "image": "https://tannerdolby.com/images/arch-spiral-large.jpg",
            "image:alt": "Archimedean Spiral"
        };
        for (const prop in map) {
            cy.get(`meta[property='og:${prop}']`)
                .each(el => {
                    cy.get(el)
                        .invoke("attr", "content")
                        .should("eq", map[prop])
                });
        }
    });

    it("Canonical link generated and matches", () => {
        cy.get("link[rel='canonical']")
            .invoke("attr", "href")
            .should("eq", "https://tannerdolby.com")
    });
});
