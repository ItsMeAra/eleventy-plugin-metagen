describe("Testing the meta tags generated by eleventy-plugin-metagen ", () => {
    before(() => {
        cy.visit("../../_site/tests/index.html");
    });

    it("<title> tag is generated and matches", () => {
        cy.title()
            .should("eq", "Eleventy Plugin Meta Generator")
    });

    it("Generic meta tags are generated", () => {
        const map = {
            "charset": "utf-8",
            "http-equiv": "IE=edge",
            "viewport": "width=device-width, initial-scale=1",
            "author": "Tanner Dolby",
            "title": "Eleventy Plugin Meta Generator",
            "description": "An eleventy shortcode for generating meta tags.",
            "generator": "11ty"
        };
        let idx = 0;
        for (const prop in map) {
            if (idx == 0) {
                cy.get("meta[charset]")
                    .invoke("attr", "charset")
                    .should("eq", "utf-8")
            } else if (idx == 1) {
                cy.get("meta[http-equiv]")
                    .invoke("attr", "http-equiv")
                    .should("eq", "X-UA-Compatible")
                cy.get("meta[http-equiv]")
                    .invoke("attr", "content")
                    .should("eq", "IE=edge")
            } else {
                cy.get(`meta[name=${prop}]`)
                    .each(el => {
                        cy.get(el)
                            .invoke("attr", "content")
                            .should("eq", map[prop])
                    });
            }
            idx += 1;
        }
    });

    it("Robots tag is generated", () => {
        cy.get(`meta[name="robots"]`)
            .invoke("attr", "content")
            .should("eq", "noindex")
    });

    it("Preconnect and/or dns-prefetch tags are generated", () => {
        const map = {
            "preconnect": "https://foo.com",
            "dns-prefetch": "https://example.com"
        };
        for (const prop in map) {
            cy.get(`link[rel="${prop}"]`)
                .invoke("attr", "href")
                .should("eq", `${map[prop]}`)
        }
    });

    it("Custom crawler tags are generated", () => {
        const map = {
            "googlebot": "noindex",
            "googlebot-news": "nosnippet"
        };
        for (const prop in map) {
            cy.get(`meta[name="${prop}"]`)
                .invoke("attr", "content")
                .should("eq", `${map[prop]}`)
        }
    }); 

    it("Twitter meta tags are generated", () => {
        const map = {
            "card": "summary_large_image",
            "site": "@tannerdolby",
            "creator": "@tannerdolby",
            "url": "https://tannerdolby.com",
            "title": "Eleventy Plugin Meta Generator",
            "description": "An eleventy shortcode for generating meta tags.",
            "image": "https://tannerdolby.com/images/arch-spiral-large.jpg",
            "image:alt": "Archimedean Spiral"
        };
        for (const prop in map) {
            cy.get(`meta[name='twitter:${prop}']`)
                .each(el => {
                    cy.get(el)
                        .invoke("attr", "content")
                        .should("eq", map[prop]);
                });
        }
    });

    it("Open Graph meta tags are generated", () => {
        const map = {
            "type": "website",
            "url": "https://tannerdolby.com",
            "locale": "en_US",
            "title": "Eleventy Plugin Meta Generator",
            "description": "An eleventy shortcode for generating meta tags.",
            "image": "https://tannerdolby.com/images/arch-spiral-large.jpg",
            "image:alt": "Archimedean Spiral"
        };
        for (const prop in map) {
            cy.get(`meta[property='og:${prop}']`)
                .each(el => {
                    cy.get(el)
                        .invoke("attr", "content")
                        .should("eq", map[prop])
                });
        }
    });

    it("Canonical link generated and matches", () => {
        cy.get("link[rel='canonical']")
            .invoke("attr", "href")
            .should("eq", "https://tannerdolby.com")
    });

    it("Alternate og:locales generated if specified", () => {
        const alternateLocales = ["es", "zh", "ja"];
        alternateLocales.forEach((locale, i) => {
            cy.get("meta[property='og:locale:alternate']")
                .eq(i)
                .invoke("attr", "content")
                .should("eq", locale);
        });
    });

    it("Custom user-defined tags generated", () => {
        cy.get("meta[foo='bar']")
            .invoke("attr", "content")
            .should("eq", "fizz")
    });

    it("CSS stylesheets generated", () => {
        const stylesheets = ["style.css", "foo.scss"];
        stylesheets.forEach((stylesheet, i) => {
            cy.get("link[rel='stylesheet']")
                .eq(i)
                .invoke("attr", "href")
                .should("eq", stylesheet);
        });
    });

    it("Inline-css generated", () => {
        cy.get("style")
            .invoke("text")
            .should("eq", "h1 {color: red}")
    });

    it("JS scripts generated", () => {
        const scripts = ["foo.js", "bar.js"];
        scripts.forEach((script, i) => {
            cy.get("script[src]")
                .eq(i)
                .invoke("attr", "src")
                .should("eq", script)
            if (i == 1) {
                cy.get("script[async]")
                    .invoke("attr", "src")
                    .should("eq", scripts[1])
            }
        });
    });

    it("Inline-js generated", () => {
        cy.get("script")
            .eq(3)
            .invoke("text")
            .should("eq", "console.log('hello, world');")
    });
});
